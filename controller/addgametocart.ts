// routes/purchase.ts (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô "Add to Cart")
import express from "express";
import { conn } from "../dbconnect";
import { jwtAuthen } from "../jwtauth";

export const router = express.Router();

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡∏ã‡∏∑‡πâ‡∏≠" ‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"
router.post("/", jwtAuthen, (req: any, res) => {
  const authData = req.auth;
  const userId = authData?.userId;
  // ‡∏•‡∏ö discount_code ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô checkout
  const { games } = req.body;

  if (!userId || !games || !Array.isArray(games) || games.length === 0) {
    return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  conn.getConnection((err, connection) => {
    if (err)
      return res.status(500).json({ message: "Database connection error" });

    connection.beginTransaction(async (err) => {
      if (err) {
        connection.release();
        return res.status(500).json({ message: "Transaction error" });
      }

      try {
        const gameIds = games.map((g: any) => g.game_id);

        // [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏°‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß)
        const ownedGamesQuery = `
          SELECT oi.game_id 
          FROM order_items oi 
          JOIN orders o ON oi.order_id = o.id 
          WHERE o.user_id = ? 
          AND o.status = 'paid' 
          AND oi.game_id IN (?)
        `;

        // [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏°‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (pending)
        // ‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô (pending) ‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        const chechGamesQuery = `
          SELECT oi.game_id 
          FROM order_items oi 
          JOIN orders o ON oi.order_id = o.id 
          WHERE o.user_id = ? 
          AND o.status = 'pending' 
          AND oi.game_id IN (?)
        `;

        const ownedGames: any = await new Promise((resolve, reject) => {
          connection.query(
            ownedGamesQuery,
            [userId, gameIds],
            (err, results) => {
              if (err) reject(err);
              else resolve(results);
            }
          );
        });

        const chechGames: any = await new Promise((resolve, reject) => {
          connection.query(
            chechGamesQuery,
            [userId, gameIds],
            (err, results) => {
              if (err) reject(err);
              else resolve(results);
            }
          );
        });

        if (ownedGames.length > 0) {
          const ownedGameId = ownedGames[0].game_id;
          throw new Error(
            `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏Å‡∏° ID: ${ownedGameId} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ`
          );
        }
        if (chechGames.length > 0) {
          const ownedcartGameId = chechGames[0].game_id;
          throw new Error(
            `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ID: ${ownedcartGameId} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡πÄ‡∏•‡πâ‡∏ß`
          );
        }

        // [‡∏•‡∏ö‡∏≠‡∏≠‡∏Å] ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á wallet_balance ‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        // const userRow: any = ...

        // [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
        const gameRows: any = await new Promise((resolve, reject) => {
          connection.query(
            `SELECT id, price FROM games WHERE id IN (?)`,
            [gameIds],
            (err, results) => {
              if (err) reject(err);
              else resolve(results);
            }
          );
        });

        let totalPrice = 0;
        const gameMap: any = {};
        gameRows.forEach((g: any) => (gameMap[g.id] = g.price));

        games.forEach((g: any) => {
          const price = gameMap[g.game_id];
          if (!price) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏° id ${g.game_id}`);
          totalPrice += price * g.quantity;
        });

        // [‡∏•‡∏ö‡∏≠‡∏≠‡∏Å] ‡∏•‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ discount_code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // if (discount_code) { ... }
        // ...
        // const updateCodeResult: any = ...

        // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î status = 'pending'
        // ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ final_price ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö total_price ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        const orderResult: any = await new Promise((resolve, reject) => {
          connection.query(
            "INSERT INTO orders (user_id, total_price, discount_code, final_price, status) VALUES (?, ?, ?, ?, 'pending')",
            [userId, totalPrice, null, totalPrice], // discount_code ‡πÄ‡∏õ‡πá‡∏ô null, status ‡πÄ‡∏õ‡πá‡∏ô 'pending'
            (err, result) => (err ? reject(err) : resolve(result))
          );
        });

        const orderId = orderResult.insertId;

        // [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÉ‡∏ô order_items
        for (const g of games) {
          await new Promise((resolve, reject) => {
            connection.query(
              "INSERT INTO order_items (order_id, game_id, quantity, price) VALUES (?, ?, ?, ?)",
              [orderId, g.game_id, g.quantity, gameMap[g.game_id]],
              (err) => (err ? reject(err) : resolve(true))
            );
          });
        }

        // [‡∏•‡∏ö‡∏≠‡∏≠‡∏Å] ‡∏•‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï wallet_balance
        // await new Promise(...)

        // [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] Commit transaction
        connection.commit((err) => {
          if (err) {
            connection.rollback(() => connection.release());
            return res.status(500).json({ message: "Commit error" });
          }
          console.log("üõí Transaction Commit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
          connection.release();
          res.json({
            message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            userId: userId,
            order_id: orderId, // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (pending order)
            total_price: totalPrice,
          });
        });
      } catch (error: any) {
        connection.rollback(() => connection.release());
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô try-catch block:", error.message);
        res.status(400).json({ message: error.message });
      }
    });
  });
});