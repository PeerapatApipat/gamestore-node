// controller/cart.ts
import express, { Request, Response } from "express";
import { conn } from "../dbconnect";
import { jwtAuthen } from "../jwtauth"; // Import jwtAuthen

export const router = express.Router();

/**
 * ‚úÖ [‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°] POST /cart/validate-code
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ù‡∏±‡πà‡∏á Front-end)
 */
router.post("/validate-code", jwtAuthen, (req: any, res: Response) => {
  const { code } = req.body;
  const user_id = req.auth.userId; // ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å token

  if (!code || !user_id) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á code" });
  }

  const findCodeSql = "SELECT * FROM discount_codes WHERE code = ?";
  conn.query(findCodeSql, [code], (err, results) => {
    if (err) {
      console.error("[ValidateCode] SQL error 1:", err.message);
      return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    if (results.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ" });
    }

    const discountCode = results[0];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (
      discountCode.expire_date &&
      new Date(discountCode.expire_date) < new Date()
    ) {
      return res.status(400).json({ message: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
    if (discountCode.max_uses > 0 && discountCode.used_count >= discountCode.max_uses) {
      return res
        .status(400)
        .json({ message: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const checkUserUsageSql =
      "SELECT COUNT(*) AS usage_count FROM orders WHERE user_id = ? AND discount_code = ? AND status = 'paid'";

    conn.query(checkUserUsageSql, [user_id, code], (err, usageResult) => {
      if (err) {
        console.error("[ValidateCode] SQL error 2:", err.message);
        return res
          .status(500)
          .json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ" });
      }

      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      if (usageResult[0].usage_count > 0 && discountCode.max_uses === 1) {
        return res
          .status(400)
          .json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
      res.status(200).json({
        message: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
        code: discountCode.code,
        discount_percent: discountCode.discount_percent,
      });
    });
  });
});

/**
 * üõí [‡πÉ‡∏´‡∏°‡πà] GET /cart
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (orders.status = 'pending')
 */
router.get("/", jwtAuthen, (req: any, res: Response) => {
  const userId = req.auth.userId;

  const sql = `
    SELECT 
      o.id AS order_id,
      oi.id AS item_id,
      oi.game_id,
      oi.quantity,
      g.title,
      g.price,
      g.image_url,
      g.description
    FROM orders o
    JOIN order_items oi ON o.id = oi.order_id
    JOIN games g ON oi.game_id = g.id
    WHERE o.user_id = ? AND o.status = 'pending'
    ORDER BY o.order_date DESC
  `;

  conn.query(sql, [userId], (err, results) => {
    if (err) {
      console.error("[GetCart] SQL error:", err.message);
      return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.status(200).json(results);
  });
});

/**
 * üóëÔ∏è [‡πÉ‡∏´‡∏°‡πà] DELETE /cart/item/:itemId
 * ‡∏•‡∏ö item ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏•‡∏ö‡∏à‡∏≤‡∏Å order_items)
 */
router.delete("/item/:itemId", jwtAuthen, (req: any, res: Response) => {
  const userId = req.auth.userId;
  const itemId = req.params.itemId;

  if (!itemId) {
    return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });
  }

  conn.getConnection((err, connection) => {
    if (err) {
      return res.status(500).json({ message: "Database connection error" });
    }

    connection.beginTransaction(async (err) => {
      if (err) {
        connection.release();
        return res.status(500).json({ message: "Transaction error" });
      }

      try {
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ order_id ‡πÅ‡∏•‡∏∞ price ‡∏Ç‡∏≠‡∏á item ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
        const itemQuery = `
          SELECT oi.order_id, oi.price, oi.quantity
          FROM order_items oi
          JOIN orders o ON oi.order_id = o.id
          WHERE oi.id = ? AND o.user_id = ? AND o.status = 'pending'
        `;
        const itemResult: any = await new Promise((resolve, reject) => {
          connection.query(itemQuery, [itemId, userId], (err, results) => {
            if (err) reject(err);
            else resolve(results);
          });
        });

        if (itemResult.length === 0) {
          throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
        }

        const { order_id, price, quantity } = itemResult[0];
        const itemTotalPrice = price * quantity;

        // 2. ‡∏•‡∏ö item ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å order_items
        await new Promise((resolve, reject) => {
          connection.query(
            "DELETE FROM order_items WHERE id = ?",
            [itemId],
            (err) => (err ? reject(err) : resolve(true))
          );
        });

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ item ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô order ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const countQuery = "SELECT COUNT(*) AS itemCount FROM order_items WHERE order_id = ?";
        const countResult: any = await new Promise((resolve, reject) => {
          connection.query(countQuery, [order_id], (err, results) => {
            if (err) reject(err);
            else resolve(results);
          });
        });

        if (countResult[0].itemCount === 0) {
          // 4a. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ item ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏ö order ‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏¥‡πâ‡∏á
          await new Promise((resolve, reject) => {
            connection.query(
              "DELETE FROM orders WHERE id = ?",
              [order_id],
              (err) => (err ? reject(err) : resolve(true))
            );
          });
        } else {
          // 4b. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ item ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á order
          const updateOrderSql = `
            UPDATE orders 
            SET total_price = total_price - ?, final_price = total_price - ?
            WHERE id = ?
          `;
          await new Promise((resolve, reject) => {
            connection.query(
              updateOrderSql,
              [itemTotalPrice, itemTotalPrice, order_id],
              (err) => (err ? reject(err) : resolve(true))
            );
          });
        }

        // 5. Commit
        connection.commit((err) => {
          if (err) throw err;
          connection.release();
          res.status(200).json({ message: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        });
      } catch (error: any) {
        connection.rollback(() => {
          connection.release();
          res.status(400).json({ message: error.message });
        });
      }
    });
  });
});

/**
 * üí≥ [‡πÉ‡∏´‡∏°‡πà] POST /cart/checkout
 * ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å 'pending' order, ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î, ‡∏´‡∏±‡∏Å wallet, ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'paid'
 */
router.post("/checkout", jwtAuthen, (req: any, res: Response) => {
  const userId = req.auth.userId;
  const { discount_code } = req.body; // ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null)

  conn.getConnection((err, connection) => {
    if (err) {
      return res.status(500).json({ message: "Database connection error" });
    }

    connection.beginTransaction(async (err) => {
      if (err) {
        connection.release();
        return res.status(500).json({ message: "Transaction error" });
      }

      try {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Wallet) ‡πÅ‡∏•‡∏∞ Lock row
        const userResult: any = await new Promise((resolve, reject) => {
          connection.query(
            "SELECT wallet_balance FROM users WHERE user_id = ? FOR UPDATE",
            [userId],
            (err, results) => (err ? reject(err) : resolve(results))
          );
        });
        if (userResult.length === 0) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
        let walletBalance = parseFloat(userResult[0].wallet_balance);

        // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (pending) ‡πÅ‡∏•‡∏∞ Lock rows
        const cartItemsSql = `
          SELECT o.id AS order_id, oi.price, oi.quantity, oi.game_id
          FROM orders o
          JOIN order_items oi ON o.id = oi.order_id
          WHERE o.user_id = ? AND o.status = 'pending'
          FOR UPDATE
        `;
        const cartItems: any = await new Promise((resolve, reject) => {
          connection.query(cartItemsSql, [userId], (err, results) => {
            if (err) reject(err);
            else resolve(results);
          });
        });

        if (cartItems.length === 0) {
          throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤");
        }

        // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
        let totalPrice = cartItems.reduce(
          (sum: number, item: any) => sum + item.price * item.quantity,
          0
        );
        let finalPrice = totalPrice;
        let discountPercent = 0;

        // 4. [‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        if (discount_code) {
          const codeResult: any = await new Promise((resolve, reject) => {
            connection.query(
              "SELECT * FROM discount_codes WHERE code = ? FOR UPDATE",
              [discount_code],
              (err, results) => (err ? reject(err) : resolve(results))
            );
          });
          if (codeResult.length === 0)
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ");

          const codeData = codeResult[0];
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          if (
            codeData.expire_date &&
            new Date(codeData.expire_date) < new Date()
          )
            throw new Error("‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
          if (codeData.max_uses > 0 && codeData.used_count >= codeData.max_uses)
            throw new Error("‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß");
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (‡∏à‡∏≤‡∏Å‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
           const usageResult: any = await new Promise((resolve, reject) => {
             connection.query(
               "SELECT COUNT(*) AS usage_count FROM orders WHERE user_id = ? AND discount_code = ? AND status = 'paid'",
               [userId, discount_code],
               (err, results) => (err ? reject(err) : resolve(results))
             );
           });
          
           if (usageResult[0].usage_count > 0 && codeData.max_uses === 1) // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ max_uses=1 ‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
             throw new Error("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
          discountPercent = codeData.discount_percent;
          finalPrice = totalPrice * (1 - discountPercent / 100);

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î
          await new Promise((resolve, reject) => {
            connection.query(
              "UPDATE discount_codes SET used_count = used_count + 1 WHERE code = ?",
              [discount_code],
              (err) => (err ? reject(err) : resolve(true))
            );
          });
        }

        // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wallet
        if (walletBalance < finalPrice) {
          throw new Error("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô Wallet ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
        }

        // 6. [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°:
        //    ‡∏™‡∏£‡πâ‡∏≤‡∏á Order 'paid' ‡πÉ‡∏´‡∏°‡πà 1 ‡∏≠‡∏±‡∏ô
        //    ‡∏¢‡πâ‡∏≤‡∏¢ 'order_items' ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà Order ‡πÉ‡∏´‡∏°‡πà
        //    ‡∏•‡∏ö Order 'pending' ‡πÄ‡∏Å‡πà‡∏≤‡πÜ ‡∏ó‡∏¥‡πâ‡∏á

        // 6a. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order 'paid' ‡πÉ‡∏´‡∏°‡πà
        const newOrderSql = `
          INSERT INTO orders (user_id, total_price, discount_code, final_price, status, order_date)
          VALUES (?, ?, ?, ?, 'paid', CURRENT_TIMESTAMP)
        `;
        const newOrderResult: any = await new Promise((resolve, reject) => {
          connection.query(
            newOrderSql,
            [userId, totalPrice, discount_code || null, finalPrice],
            (err, result) => (err ? reject(err) : resolve(result))
          );
        });
        const newOrderId = newOrderResult.insertId;

        // 6b. ‡∏¢‡πâ‡∏≤‡∏¢ items
        const pendingOrderIds = [
          ...new Set(cartItems.map((item: any) => item.order_id)),
        ];
        await new Promise((resolve, reject) => {
          connection.query(
            "UPDATE order_items SET order_id = ? WHERE order_id IN (?)",
            [newOrderId, pendingOrderIds],
            (err) => (err ? reject(err) : resolve(true))
          );
        });
        
        // 6c. ‡∏•‡∏ö 'pending' orders ‡πÄ‡∏Å‡πà‡∏≤
        await new Promise((resolve, reject) => {
          connection.query(
            "DELETE FROM orders WHERE id IN (?) AND user_id = ?",
            [pendingOrderIds, userId],
            (err) => (err ? reject(err) : resolve(true))
          );
        });

        // 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Wallet ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const newWalletBalance = walletBalance - finalPrice;
        await new Promise((resolve, reject) => {
          connection.query(
            "UPDATE users SET wallet_balance = ? WHERE user_id = ?",
            [newWalletBalance, userId],
            (err) => (err ? reject(err) : resolve(true))
          );
        });

        // 8. Commit
        connection.commit((err) => {
          if (err) throw err;
          connection.release();
          res.status(200).json({
            message: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            order_id: newOrderId,
            final_price: finalPrice,
            remaining_balance: newWalletBalance,
          });
        });
      } catch (error: any) {
        connection.rollback(() => {
          connection.release();
          console.error("[Checkout] Error:", error.message);
          res.status(400).json({ message: error.message });
        });
      }
    });
  });
});